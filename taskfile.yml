version: "3"

vars:
  # could use env var
  PACKAGE_NAME: "digitalkin_proto"
  PACKAGE_DIR: "src/{{.PACKAGE_NAME}}"
  PROTO_FOLDER: "service-apis"
  PROTO_PATH: "{{.PROTO_FOLDER}}/proto"

tasks:
  install-proto-repo:
    desc: "Install project proto submodule from repo service-apis"
    cmds:
      - git submodule update --init --recursive

  build-proto:
    desc: "Build project proto from submodule"
    cmds:
      - buf dep update {{.PROTO_PATH}}
      - |
          buf generate {{.PROTO_PATH}} --template {{.PROTO_PATH}}/buf.gen.py.yaml \
          --include-imports \
          -o src/{{.PACKAGE_NAME}} \
          --path {{.PROTO_PATH}}/digitalkin/module \
          --path {{.PROTO_PATH}}/digitalkin/module_registry
  process-proto:
    desc: "Clean project proto import in generated files from submodule"
    cmds:
      - |
          python -c '
          import os, re
          pkg_name = "{{.PACKAGE_NAME}}"
          pkg_dir = "{{.PACKAGE_DIR}}"
          pattern = re.compile(r"^(from|import)\s+((google\.api|digitalkin\.|buf\.validate)[^\s]*)")
          for root, _, files in os.walk(pkg_dir):
              for file in files:
                  if file.endswith(".py"):
                      filepath = os.path.join(root, file)
                      with open(filepath, "r") as f:
                          content = f.read()
                      modified = pattern.sub(r"\1 " + pkg_name + r".\2", content)
                      if modified != content:
                          with open(filepath, "w") as f:
                              f.write(modified)
                          print(f"Updated imports in {filepath}")'
  venv:
    desc: "Install project venv"
    cmds:
      - uv venv --python 3.10

  install-deps:
    desc: "Install project dependencies from pyproject.toml"
    cmds:
      - uv pip compile pyproject.toml -o requirements.txt
      - |
          if [ -n "$VIRTUAL_ENV" ] || [ -d ".venv" -a -f ".venv/bin/activate" ]; then
            echo "Installing in virtual environment"
            uv pip install -e .
          else
            echo "Installing in system Python"
            uv pip install -e . --system
          fi

  dev-deps:
    desc: "Install development dependencies"
    cmds:
      - uv pip install -e ".[dev]"

  setup-pre-commit:
    desc: "Install pre-commit hooks"
    cmds:
      - pre-commit install

  build-package:
    desc: "Build the PyPI package (runs your build script)"
    cmds:
      - |
          # Find all directories within the target directory and add __init__.py if not present
          find "{{.PACKAGE_DIR}}" -type d -exec bash -c 'touch "$0/__init__.py"' {} \;
      - uv build

  publish-package-test:
    desc: "Publish the package to the PyPI's test env"
    cmds:
      - uv publish --repository-url https://test.pypi.org/legacy/

  publish-package:
    desc: "Publish the package to PyPI"
    cmds:
      - uv publish

  test-package:
    desc: "Test if the the PyPI package is well published"
    cmds:
      - uv run --with {{.PACKAGE_NAME}} --no-project -- python -c \"import {{.PACKAGE_NAME}}\"

  run-tests:
    desc: "Run pytest tests"
    cmds:
      - pytest

  lint:
    desc: "Run linting with Ruff"
    cmds:
      - ruff check
      - ruff format --check

  format:
    desc: "Format code with Ruff"
    cmds:
      - ruff format
      - ruff check --fix

  clean:
    desc: "Remove build artifacts and cache directories"
    cmds:
      - rm -rf dist src/{{.PACKAGE_NAME}}.egg-info
      - find . -type d -name "__pycache__" -exec rm -rf {} +
      - find . -type d -name "*.egg-info" -exec rm -rf {} +

  clean-all:
    desc: "Deep clean including generated source code but preserve important files"
    cmds:
      - task: clean
      # Save the content of the top-level __init__.py if it exists
      - cp src/{{.PACKAGE_NAME}}/__init__.py /tmp/__init__.py.backup 2>/dev/null || true
      # Delete everything in the directory
      - rm -rf src/{{.PACKAGE_NAME}}/*
      # Ensure the directory exists
      - mkdir -p src/{{.PACKAGE_NAME}}
      # Restore the top-level __init__.py file
      - |
          if [ -f /tmp/__init__.py.backup ]; then
            cp /tmp/__init__.py.backup src/{{.PACKAGE_NAME}}/__init__.py
            rm -f /tmp/__init__.py.backup
          fi
      # Clean up virtual environment
      - rm -rf .venv
      - rm -rf dist

  gen-proto:
    desc: "Install, update and build protobuff file for python"
    cmds:
      - task: install-proto-repo
      - task: build-proto
      - task: process-proto

  gen-package:
    desc: "Install, update and build protobuff file for python"
    cmds:
      - task: install-deps
      - task: build-package

  test-publish:
    desc: "push and test the package in a test env"
    cmds:
      - task: publish-package-test
      - task: test-package

  bump-version:
    desc: "Bump package version (type: major, minor, or patch)"
    cmds:
      - bump2version {{.CLI_ARGS}}

  setup-dev:
    desc: "Setup development environment"
    cmds:
      - task: venv
      - task: install-deps
      - task: dev-deps
      - task: setup-pre-commit

  all:
    desc: "Run all steps: init, install, and build"
    cmds:
      - task: gen-proto
      - task: gen-package
      # - test-publish
